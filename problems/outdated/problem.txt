function () {
  if (!shop.cwd())
    return ''

  // If it hasn't already been done, add a new version of once.
  var once = require(shop.datadir + '/registry/once/body.json')
  if (once['dist-tags'].latest === '1.3.0') {
    // publish an update
    shop.cpr(path.resolve(__dirname, '..', 'lib', 'registry-assets-update'),
             path.resolve(shop.datadir, 'registry'))
  }

  reg.run('outdated')

  return function () { /*
Now that we have some dependencies, and you've learned that your own
packages can be updated repeatedly, the obvious question is: What do
we do when someone *else* updates *their* package?

The first step is to detect this.  Because of the way that we define
our dependencies with a version range, and each release is a unique
combination of a name and a version, we can detect compatible releases
programmatically with the `npm outdated` command.

To pass this challenge, run `how-to-npm verify PKG` where `PKG`
is the name of the package that is out of date.
*/}.toString().split('\n').slice(1,-1).join('\n')
}